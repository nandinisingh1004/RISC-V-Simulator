# long long int fact (long long int n){
#     if (n < 1) return (1);
#     else return (n * fact(n -1));
# }
.data 
n : .word 10

.text
lw x10, n 
li x19, 1 # constant

jal x1, fact
beq x0, x0, exit

# factorial procedure
fact:
addi sp, sp, -8 
sw x10, 0(sp) # saving current n on the stack
sw x1, 4(sp) # saving current return address on the stack
bgt x10, x19, else # branch if x10 > x19 ( n > 1 )
# base case
addi sp, sp, 8 
jalr x0, x1, 0
else: 
# recursion
addi x10, x10, -1
jal x1, fact
# coming back after recursing through smaller n's
lw x20, 0(sp) # retrieving current n from the stack # x20 = n
lw x1, 4(sp) # retrieving current return address from the stack
addi sp, sp, 8
mul x10, x10, x20 # currans = prevans*n
jalr x0, x1, 0
exit:
# final result stored in x10
