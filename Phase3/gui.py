# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'finalDesginFIle.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from state_class import CPU,State,BTB,MainMemory,DataCacheMemory,InstrCacheMemory
from hdu_class import HDU
import math
from sys import stdout

def checkHazardous(states,isDataForwardingEnabled):
    isHazard, stallparameters, newState, forwardPaths = hduob.isDataHazard(states,isDataForwardingEnabled)
    ui.label_26.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_27.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_28.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_29.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_30.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_31.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.cacheDataUpdate(numMisses,numHits)
    if len(forwardPaths) != 0:
        if forwardPaths[0] == 0:
            ui.label_31.setStyleSheet("background:rgb(255, 255, 0);color:black")
            ui.label_28.setStyleSheet("background:rgb(255, 255, 0);color:black")
        if forwardPaths[0] == 1:
            ui.label_26.setStyleSheet("background:rgb(255, 255, 0);color:black")
            ui.label_30.setStyleSheet("background:rgb(255, 255, 0);color:black")
        if forwardPaths[0] == 2:
            ui.label_29.setStyleSheet("background:rgb(255, 255, 0);color:black")
            ui.label_28.setStyleSheet("background:rgb(255, 255, 0);color:black")
        if forwardPaths[0] == 3:
            ui.label_26.setStyleSheet("background:rgb(255, 255, 0);color:black")
            ui.label_29.setStyleSheet("background:rgb(255, 255, 0);color:black")
        if forwardPaths[0] == 4:
            ui.label_26.setStyleSheet("background:rgb(255, 255, 0);color:black")
            ui.label_31.setStyleSheet("background:rgb(255, 255, 0);color:black")
    # print('============> ',forwardPaths)
    states = []
    stall = -1
    for i in newState:
        if i.opcode == 0:
            states.append(None)
            continue
        states.append(i)
    if stallparameters[0]==1:
        stall = stallparameters[1]
    return [isHazard, states, stall, stallparameters]

def printPipelineRegisters(states, Knob3,masterClock,Knob4,ProcessingUnit):
    if(Knob4 == False):
        if(Knob3 == False):
            return
        else:
            print(ProcessingUnit.reg)
        return
    print("Cycle number -> ", masterClock)
    print("Content of First Pipeline Register -------------------------------------- ")
    if(states[1]!=None):
        print("IR -> ",states[1].IR)
    else: print("EMPTY")
    print("Content of Second Pipeline Register -------------------------------------")
    if(states[2]!=None):
        print("Opcode -> ", states[2].opcode)
        if(states[2].RS1 != -1):
            print("RS1 -> ",states[2].RS1)
        if(states[2].RS2 != -1):
            print("RS2 -> ",states[2].RS2)
        if(states[2].RD != 0):
            print("RD -> ", states[2].RD)
        print("Immediate -> ", states[2].immed)
        if(states[2].fun3 != -1):
            print("Funct3 -> ", states[2].fun3)
        if(states[2].fun7 != -1):
            print("Funct7 -> ", states[2].fun7)
    else: print("EMPTY")
    print("Content of Third Pipeline Register ---------------------------------------")
    if(states[3]!=None):
        print("RZ -> ", states[3].RZ)
    else: print("EMPTY")
    print("Content of Fourth Pipeline Register ---------------------------------------")
    if(states[4]!=None):
        print("RY -> ", states[4].RY)
    else: print("EMPTY")
    if(Knob3 == True):
        print("Content of Register File ------------------------------------------------------------------")
        print(ProcessingUnit.reg)

def check(num, states):
    dont = True
    for i in states:
        if(i == None): continue
        if(i.PC == num):
            dont=False
    if(dont==False):
        print("Cycle number -> ", masterClock)
        print("Content of First Pipeline Register -------------------------------------- ")
        if(states[1]!=None):
            print("IR -> ",states[1].IR)
        else: print("EMPTY")
        print("Content of Second Pipeline Register -------------------------------------")
        if(states[2]!=None):
            print("Opcode -> ", states[2].opcode)
            if(states[2].RS1 != -1):
                print("RS1 -> ",states[2].RS1)
            if(states[2].RS2 != -1):
                print("RS2 -> ",states[2].RS2)
            if(states[2].RD != 0):
                print("RD -> ", states[2].RD)
            print("Immediate -> ", states[2].immed)
            if(states[2].fun3 != -1):
                print("Funct3 -> ", states[2].fun3)
            if(states[2].fun7 != -1):
                print("Funct7 -> ", states[2].fun7)
        else: print("EMPTY")
        print("Content of Third Pipeline Register ---------------------------------------")
        if(states[3]!=None):
            print("RZ -> ", states[3].RZ)
        else: print("EMPTY")
        print("Content of Fourth Pipeline Register ---------------------------------------")
        if(states[4]!=None):
            print("RY -> ", states[4].RY)
        else: print("EMPTY")
states =[None for i in range(5)] # don't change it
predictionEnabled =1
hduob = HDU()
prediction_enabled = 1
Knob1ForPipelining= False # don't change it
Knob2ForDataForwarding = False
Knob3PrintingRegFile = False
Knob4PrintingPipelineRegister = False
Knob5PrintingPipelineRegForSpecificInst = False
num = -4
if(Knob5PrintingPipelineRegForSpecificInst == True):
    num = int(input("Enter the instruction number which you want to observe : "))
    num = num*4

controlChange = False
cntBranchHazards = 0
cntBranchHazardStalls = 0
controlChange_pc = 0
controlHazard = False
controlHazard_pc = 0
btb = BTB()
cntDataHazards = 0
cntDataHazardsStalls = 0


#______________________________________________________________________inputs_____________________________________________________

cacheSize = int(input("Please Enter the cacheSize : "))
blockSize = int(input("Please Enter the blockSize : "))
cacheAssociativity = int(input("Please Enter the cacheAssociativity : "))



dataCacheMemory = DataCacheMemory(cacheSize,blockSize,cacheAssociativity)
instrCacheMemory = InstrCacheMemory(cacheSize,blockSize,cacheAssociativity)
mainMemory = MainMemory(blockSize//4)




ProcessingUnit = CPU(Knob1ForPipelining, prediction_enabled)
numberOfBitsinBO = math.log2(blockSize)
if(numberOfBitsinBO-int(numberOfBitsinBO)!=0): numberOfBitsinBO+=1
numberOfBitsinBO = int(numberOfBitsinBO)
mainMemory.readFile(numberOfBitsinBO)
# stats to be printed variables
master_PC=0
masterClock = 0
CPI = 0
LoadAndStoreInstructions = 0
ALUInst = 0
ControlInst = 0
stallsCount = 0
DataHazardCount = 0
ControlHazardCount = 0
BranchMisprediction = 0
StallsDuetoDataHazards = 0
StallsDuetoControlHazards = 0
InstCount = 0
stall = -1
programExecuted = 0
clockNonPipeline = 0
numAccesses = 0
numHits = [0]
numMisses = [0]
state = State(0)
# states[0] - fetch
# states[1] - Decode
# states[2] - execute
# states[3] - MemoryAccess
# states[4] - writeback

def resetAll():
    global programExecuted,states,predictionEnabled,hduob,prediction_enabled,Knob1ForPipelining,Knob2ForDataForwarding,Knob3PrintingRegFile,Knob4PrintingPipelineRegister,Knob5PrintingPipelineRegForSpecificInst,num,controlChange,cntBranchHazards,cntBranchHazardStalls,controlChange_pc,controlHazard,controlHazard_pc,btb,cntDataHazards,cntDataHazardsStalls,ProcessingUnit,master_PC,masterClock,CPI,LoadAndStoreInstructions,ALUInst,ControlInst,stallsCount,DataHazardCount,ControlHazardCount,BranchMisprediction,StallsDuetoDataHazards,StallsDuetoControlHazards,InstCount,stall
    states =[None for i in range(5)] # don't change it
    predictionEnabled =1
    hduob = HDU()
    prediction_enabled = 1
    Knob1ForPipelining= False # don't change it
    Knob2ForDataForwarding = False
    Knob3PrintingRegFile = False
    Knob4PrintingPipelineRegister = False
    Knob5PrintingPipelineRegForSpecificInst = False
    num = -4
    if(Knob5PrintingPipelineRegForSpecificInst == True):
        num = int(input("Enter the instruction number which you want to observe : "))
        num = num*4

    controlChange = False
    cntBranchHazards = 0
    cntBranchHazardStalls = 0
    controlChange_pc = 0
    controlHazard = False
    controlHazard_pc = 0
    btb = BTB()
    cntDataHazards = 0
    cntDataHazardsStalls = 0
    ProcessingUnit = CPU(Knob1ForPipelining, prediction_enabled)
    # stats to be printed variables
    master_PC=0
    masterClock = 0
    CPI = 0
    LoadAndStoreInstructions = 0
    ALUInst = 0
    ControlInst = 0
    stallsCount = 0
    DataHazardCount = 0
    ControlHazardCount = 0
    BranchMisprediction = 0
    StallsDuetoDataHazards = 0
    StallsDuetoControlHazards = 0
    InstCount = 0
    stall = -1
    programExecuted = 0

    ui.reg1.setText('x0:0')
    ui.reg2.setText('x1:0')
    ui.reg3.setText('x2:0')
    ui.reg4.setText('x3:0')
    ui.reg5.setText('x4:0')
    ui.reg6.setText('x5:0')
    ui.reg7.setText('x6:0')
    ui.reg8.setText('x7:0')
    ui.reg9.setText('x8:0')
    ui.reg10.setText('x9:0')
    ui.reg11.setText('x10:0')
    ui.reg12.setText('x11:0')
    ui.reg13.setText('x12:0')
    ui.reg14.setText('x13:0')
    ui.reg15.setText('x14:0')
    ui.reg16.setText('x15:0')
    ui.label_14.setText("")
    ui.label_5.setText("")
    ui.label_4.setText("")
    ui.label_8.setText("")
    ui.label_10.setText("")
    ui.label_11.setText("")
    ui.label_7.setText("")
    ui.label_1.setText("")
    ui.label_13.setText("")
    ui.label_2.setText("")
    ui.label_9.setText("")
    ui.label_12.setText("")
    ui.label_3.setText("")
    ui.label_15.setText("")
    ui.label_6.setText("")
    ui.label_16.setText("")
    ui.cacheDataUpdate(numMisses,numHits)
    ui.label_26.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_27.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_28.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_29.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_30.setStyleSheet("background:rgb(85, 255, 255);color:black")
    ui.label_31.setStyleSheet("background:rgb(85, 255, 255);color:black")

    ui.label_19.setText("Clock: 0")

    ui.pipeline1.setText("None")
    ui.pipeline2.setText("None")
    ui.pipeline1_2.setText("None")
    ui.pipeline2_2.setText("None")
    ui.pipeline2_3.setText("None")

def isPipelined():
    global Knob1ForPipelining
    if Knob1ForPipelining == False:
        Knob1ForPipelining = True
        ui.pushButton_5.setStyleSheet("background:rgb(0, 85, 255);color:white")
    else:
        ui.pushButton_5.setStyleSheet("color:white")
        Knob1ForPipelining = False
    pass

def isDataForward():
    global Knob2ForDataForwarding
    if Knob2ForDataForwarding == False:
        ui.pushButton_12.setStyleSheet("background:rgb(0, 85, 255);color:white")
        Knob2ForDataForwarding = True
    else:
        ui.pushButton_12.setStyleSheet("color:white")
        Knob2ForDataForwarding = False
    pass

def printValuesInRegAfterEachCycle():
    global Knob3PrintingRegFile
    if Knob3PrintingRegFile == False:
        ui.pushButton_10.setStyleSheet("background:rgb(0, 85, 255);color:white")
        Knob3PrintingRegFile = True
    else:
        ui.pushButton_10.setStyleSheet("color:white")
        Knob3PrintingRegFile = False
    pass

def printValuesInPipeRegAfterEachCycle():
    global Knob4PrintingPipelineRegister
    if Knob4PrintingPipelineRegister == False:
        ui.pushButton_6.setStyleSheet("background:rgb(0, 85, 255);color:white")
        Knob4PrintingPipelineRegister = True
    else:
        Knob4PrintingPipelineRegister = False
        ui.pushButton_6.setStyleSheet("color:white")
    pass

def printForSpecific():
    global Knob5PrintingPipelineRegForSpecificInst
    if Knob5PrintingPipelineRegForSpecificInst == False:
        Knob5PrintingPipelineRegForSpecificInst = True
        ui.pushButton_11.setStyleSheet("background:rgb(0, 85, 255);color:white")

    else:
        Knob5PrintingPipelineRegForSpecificInst = False
        ui.pushButton_11.setStyleSheet("color:white")

def mainFunc(isStep):
    global numMisses,numHits,clockNonPipeline, programExecuted,states,predictionEnabled,hduob,prediction_enabled,Knob1ForPipelining,Knob2ForDataForwarding,Knob3PrintingRegFile,Knob4PrintingPipelineRegister,Knob5PrintingPipelineRegForSpecificInst,num,controlChange,cntBranchHazards,cntBranchHazardStalls,controlChange_pc,controlHazard,controlHazard_pc,btb,cntDataHazards,cntDataHazardsStalls,ProcessingUnit,master_PC,masterClock,CPI,LoadAndStoreInstructions,ALUInst,ControlInst,stallsCount,DataHazardCount,ControlHazardCount,BranchMisprediction,StallsDuetoDataHazards,StallsDuetoControlHazards,InstCount,stall
    while programExecuted == 0:
        ui.cacheDataUpdate(numMisses,numHits)
        ui.label_26.setStyleSheet("background:rgb(85, 255, 255);color:black")
        ui.label_27.setStyleSheet("background:rgb(85, 255, 255);color:black")
        ui.label_28.setStyleSheet("background:rgb(85, 255, 255);color:black")
        ui.label_29.setStyleSheet("background:rgb(85, 255, 255);color:black")
        ui.label_30.setStyleSheet("background:rgb(85, 255, 255);color:black")
        ui.label_31.setStyleSheet("background:rgb(85, 255, 255);color:black")
        ui.pipeline1.setText("None")
        ui.pipeline2.setText("None")
        ui.pipeline1_2.setText("None")
        ui.pipeline2_2.setText("None")
        ui.pipeline2_3.setText("None")
        if Knob1ForPipelining:
            
            alreadyUpdatedPC = 0
            for i in reversed(range(5)):
                if(Knob5PrintingPipelineRegForSpecificInst ==True):
                    check(num,states)
                if(i==0):
                    states[i] = State(master_PC)
                    # def Fetch(self,state,btb,mainMemoryObject,instrCacheMemObj)
                    states[i] = ProcessingUnit.Fetch(states[i],btb,mainMemory,instrCacheMemory,numMisses,numHits)
                    if(states[i] !=None and states[i].predictionPC!=-1):
                        master_PC = states[i].predictionPC
                        ControlHazardCount += 1
                        alreadyUpdatedPC = 1
                    if states[0]!=None:
                        ui.pipeline1.setText(str(states[0].PC//4 + 1) + " th instruction." )
                    else:
                        ui.pipeline1.setText("None")
                    states[i+1]=states[i]
                    states[i]=None
                    ui.label_20.setText("DataHzd: "+str(DataHazardCount)+", CtrlHzd: "+str(ControlHazardCount))

                if(i==1):
                    if(states[i]==None):
                        continue
                    if(stall == i):
                        StallsDuetoDataHazards += 1
                        stallsCount += 1
                        break
                    controlHazard,control_hazard_pc = ProcessingUnit.Decode(states[i],btb)
                    if(controlHazard==1):
                        BranchMisprediction += 1
                        StallsDuetoControlHazards += 1
                        master_PC = states[i].PC + 4
                    elif(controlHazard==-1):
                        StallsDuetoControlHazards += 1
                        master_PC = control_hazard_pc
                    if states[1]!=None:
                        ui.pipeline2.setText(str(states[1].PC//4 + 1) + " th instruction." )
                    else:
                        ui.pipeline2.setText("None")
                    states[i+1] = states[i]
                    states[i]=None
                    ui.label_20.setText("DataHzd: "+str(DataHazardCount)+", CtrlHzd: "+str(ControlHazardCount))         
                if(i==2):
                    if(states[i]==None):
                        continue
                    if(stall == i):
                        StallsDuetoDataHazards += 1
                        stallsCount += 1
                        break
                    ProcessingUnit.Execute(states[i])
                    if states[2]!=None:
                        ui.pipeline1_2.setText(str(states[2].PC//4 + 1) + " th instruction." )
                    else:
                        ui.pipeline1_2.setText("None")
                    states[i+1]=states[i]
                    states[i]=None 
                    ui.label_20.setText("DataHzd: "+str(DataHazardCount)+", CtrlHzd: "+str(ControlHazardCount))               
                if(i==3):
                    if(states[i]==None):
                        continue
                    if(stall == i):
                        StallsDuetoDataHazards += 1
                        stallsCount += 1
                        break
                    
                    ProcessingUnit.MemoryAccess(states[i],dataCacheMemory,mainMemory,numMisses,numHits)
                    if states[3]!=None:
                        ui.pipeline2_2.setText(str(states[3].PC//4 + 1) + " th instruction." )
                    else:
                        ui.pipeline2_2.setText("None")
                    states[i+1]=states[i]
                    states[i]=None
                    ui.label_20.setText("DataHzd: "+str(DataHazardCount)+", CtrlHzd: "+str(ControlHazardCount))
                if(i==4):
                    if(states[i]==None):
                        continue
                    if(stall == i):
                        StallsDuetoDataHazards += 1
                        stallsCount += 1
                        break
                    if(states[i].opcode == 3 or states[i].opcode == 35):
                        LoadAndStoreInstructions += 1
                    elif(states[i].opcode in [51,19,23,55]):
                        ALUInst += 1
                    elif(states[i].opcode in [99, 103,111]):
                        ControlInst += 1
                    InstCount += 1
                    ProcessingUnit.RegisterUpdate(states[i])
                    if states[4]!=None:
                        ui.pipeline2_3.setText(str(states[4].PC//4 + 1) + " th instruction." )
                    else:
                        ui.pipeline2_3.setText("None")
                    states[i]=None  
                    ui.label_20.setText("DataHzd: "+str(DataHazardCount)+", CtrlHzd: "+str(ControlHazardCount))
                isHazard, states, stall, stallparameters = checkHazardous(states,Knob2ForDataForwarding)
                if((isHazard == 1 and Knob2ForDataForwarding == False) or (stall != -1 and Knob2ForDataForwarding == False)):
                    alreadyUpdatedPC = 1
                    break
            if(isHazard == 1):
                DataHazardCount += 1
                ui.label_20.setText("DataHzd: "+str(DataHazardCount)+", CtrlHzd: "+str(ControlHazardCount))
            if(alreadyUpdatedPC == 0):
                master_PC += 4
            
        else:
            global state
            state = State(0)
            while(state != None):
                ui.cacheDataUpdate(numMisses,numHits)
                # print(state)
                # states[i] = ProcessingUnit.Fetch(states[i],btb,mainMemory,InstrCacheMemory)
                state = ProcessingUnit.Fetch(state,btb,mainMemory,instrCacheMemory,numMisses,numHits)
                if(state == None):
                    programExecuted = 1
                    break
                ProcessingUnit.Decode(state,btb)
                ProcessingUnit.Execute(state)
                ProcessingUnit.MemoryAccess(state,dataCacheMemory,mainMemory,numMisses,numHits)
                master_PC = state.PC1
                ProcessingUnit.RegisterUpdate(state)
                state = State(master_PC)
                clockNonPipeline += 1
                ui.regUpdateGUI()
                ui.memUpdateGUI()
                ui.cacheUpdate()
                ui.label_19.setText("Clock: "+str(5*clockNonPipeline))
                if isStep == 1:
                    break
        printPipelineRegisters(states,Knob3PrintingRegFile,masterClock,Knob4PrintingPipelineRegister,ProcessingUnit)
        if Knob1ForPipelining == 1:
            masterClock +=1
            ui.regUpdateGUI()
            ui.memUpdateGUI()
            ui.cacheUpdate()

            ui.label_19.setText("Clock: "+str(masterClock))
        if Knob1ForPipelining == 0:
            ui.label_19.setText("Clock: "+str(5*clockNonPipeline)+", Executed")
            masterClock = 5*clockNonPipeline

        if Knob1ForPipelining and states[0]==None and states[1]==None and states[2]==None and states[3]==None and states[4]==None:
            programExecuted = 1
        
        if programExecuted == 1:
            printinOutputFile()
            break

        if isStep == 1:
            break
    print(ProcessingUnit.reg)

def printinOutputFile():
    global masterClock
    stdout = open('output.txt', 'w')
    L = [ f'Accesses : {numMisses + numHits}',
    f'Hits : {numHits}',
    f'Misses : {numMisses}',
    ]
    for i in L:
        print(i, file = stdout)
    print(file=stdout)
    print("=========== DATA MEMORY ===========", file=stdout)
    for i in mainMemory.dataMemory:
        print(i,"=>",mainMemory.dataMemory[i], file = stdout)
    print(file=stdout)
    print("=========== REGISTERS ===========", file = stdout)
    for i in range(len(ProcessingUnit.reg)):
        print('x'+str(i),'=>',ProcessingUnit.reg[i], file=stdout)


class Ui_MainWindow(object):
    def __init__(self):
        self.regBtn = 0
        self.memCount = 0
        self.maxCount = 10**10
        self.cacheCount = 0
        self.currentCache = 0

    def regUpdateGUI(self):
        if self.regBtn == 0:
            self.reg1.setText('x0:' +str(ProcessingUnit.reg[0]))
            self.reg2.setText('x1:' +str(ProcessingUnit.reg[1]))
            self.reg3.setText('x2:' +str(ProcessingUnit.reg[2]))
            self.reg4.setText('x3:' +str(ProcessingUnit.reg[3]))
            self.reg5.setText('x4:' +str(ProcessingUnit.reg[4]))
            self.reg6.setText('x5:' +str(ProcessingUnit.reg[5]))
            self.reg7.setText('x6:' +str(ProcessingUnit.reg[6]))
            self.reg8.setText('x7:' +str(ProcessingUnit.reg[7]))
            self.reg9.setText('x8:' +str(ProcessingUnit.reg[8]))
            self.reg10.setText('x9:' +str(ProcessingUnit.reg[9]))
            self.reg11.setText('x10:' +str(ProcessingUnit.reg[10]))
            self.reg12.setText('x11:' +str(ProcessingUnit.reg[11]))
            self.reg13.setText('x12:' +str(ProcessingUnit.reg[12]))
            self.reg14.setText('x13:' +str(ProcessingUnit.reg[13]))
            self.reg15.setText('x14:' +str(ProcessingUnit.reg[14]))
            self.reg16.setText('x15:' +str(ProcessingUnit.reg[15]))
        else:
            self.reg1.setText('x16: ' + str(ProcessingUnit.reg[16]))
            self.reg2.setText('x17: ' + str(ProcessingUnit.reg[17]))
            self.reg3.setText('x18: ' + str(ProcessingUnit.reg[18]))
            self.reg4.setText('x19: ' + str(ProcessingUnit.reg[19]))
            self.reg5.setText('x20: ' + str(ProcessingUnit.reg[20]))
            self.reg6.setText('x21: ' + str(ProcessingUnit.reg[21]))
            self.reg7.setText('x22: ' + str(ProcessingUnit.reg[22]))
            self.reg8.setText('x23: ' + str(ProcessingUnit.reg[23]))
            self.reg9.setText('x24: ' + str(ProcessingUnit.reg[24]))
            self.reg10.setText('x25: ' + str(ProcessingUnit.reg[25]))
            self.reg11.setText('x26: ' + str(ProcessingUnit.reg[26]))
            self.reg12.setText('x27: ' + str(ProcessingUnit.reg[27]))
            self.reg13.setText('x28: ' + str(ProcessingUnit.reg[28]))
            self.reg14.setText('x29: ' + str(ProcessingUnit.reg[29]))
            self.reg15.setText('x30: ' + str(ProcessingUnit.reg[30]))
            self.reg16.setText('x31: ' + str(ProcessingUnit.reg[31]))
    
    def convert(self, a):
        ans = ""
        for i in a:
            ii = i
            if ii<0:
                ii = 2**32 + ii
            ans += hex(ii)[2:]+' '
            
        return ans

    def cacheUpdate(self):
        if self.currentCache == 0:
            try:
                cacheData = "===== SET NUMBER : "+str(self.cacheCount)+" =====\n\n"
                blkCnt = 0
                for block in dataCacheMemory.dataArray[self.cacheCount]:
                    cacheData += "Block Number: " + str(blkCnt) + ", Tag: "+str(dataCacheMemory.tagArray[self.cacheCount][blkCnt])+"\n"
                    for word in block:
                        cacheData += self.convert(word) + '\n'
                    cacheData += "====================\n"
                    blkCnt+=1
                self.cacheLabel.setText(cacheData)
            except:
                self.cacheLabel.setText("GO UP!!")
        else:
            
            cacheData = "===== SET NUMBER : "+str(self.cacheCount)+" =====\n\n"
            blkCnt = 0
            for block in instrCacheMemory.instArray[self.cacheCount]:
                cacheData += "Block Number: " + str(blkCnt) + ", Tag: "+str(instrCacheMemory.tagArray[self.cacheCount][blkCnt])+"\n"
                for word in block:
                    try:
                        cacheData += (' '.join(word)) + '\n'
                    except:
                        cacheData += self.convert(word) + '\n'
                cacheData += "====================\n"
                blkCnt+=1
            self.cacheLabel.setText(cacheData)
            

    def cacheUpPressed(self):
        if self.cacheCount > 0:
            self.cacheCount -=1
            self.cacheUpdate()

    
    def cacheDownPressed(self):
        xyz = cacheSize // (blockSize*cacheAssociativity)
        self.cacheCount += 1
        if self.cacheCount>=xyz:
            self.cacheCount-=1
        self.cacheUpdate()

    def changeCachePressed(self):
        self.currentCache = 1 - self.currentCache
        self.cacheUpdate()
        if self.currentCache == 1:
            self.label_17.setText("INSTRUCTION CACHE")
        else:
            self.label_17.setText("DATA CACHE")


    def regUpPressed(self):
        self.regBtn = 0
        self.regUpdateGUI()

    def regDownPressed(self):
        self.regBtn = 1
        self.regUpdateGUI()

    def memDownPressed(self):
        if self.memCount + 16 <= self.maxCount:
            self.memCount += 16
        self.memUpdateGUI()

    def memUpPressed(self):
        if self.memCount - 16 >= 0:
            self.memCount -= 16
        self.memUpdateGUI()
        
    def memUpdateGUI(self):
        # memAddresses = list(ProcessingUnit.dataMemory.keys())[:]
        # memAddresses = list(mainMemory.dataMemory.keys())[:]
        pass
        cnt = self.memCount
        self.label_14.setText("")
        self.label_5.setText("")
        self.label_4.setText("")
        self.label_8.setText("")
        self.label_10.setText("")
        self.label_11.setText("")
        self.label_7.setText("")
        self.label_1.setText("")
        self.label_13.setText("")
        self.label_2.setText("")
        self.label_9.setText("")
        self.label_12.setText("")
        self.label_3.setText("")
        self.label_15.setText("")
        self.label_6.setText("")
        self.label_16.setText("")
        try:
            self.label_1.setText(str(memAddresses[cnt+0]) + " 1: " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+0]]))
            self.label_2.setText(str(memAddresses[cnt+1]) + " 2: " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+1]]))
            self.label_3.setText(str(memAddresses[cnt+2]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+2]]))
            self.label_4.setText(str(memAddresses[cnt+3]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+3]]))
            self.label_5.setText(str(memAddresses[cnt+4]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+4]]))
            self.label_6.setText(str(memAddresses[cnt+5]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+5]]))
            self.label_7.setText(str(memAddresses[cnt+6]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+6]]))
            self.label_8.setText(str(memAddresses[cnt+7]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+7]]))
            self.label_9.setText(str(memAddresses[cnt+8]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+8]]))
            self.label_10.setText(str(memAddresses[cnt+9]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+9]]))
            self.label_11.setText(str(memAddresses[cnt+10]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+10]]))
            self.label_12.setText(str(memAddresses[cnt+11]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+11]]))
            self.label_13.setText(str(memAddresses[cnt+12]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+12]]))
            self.label_14.setText(str(memAddresses[cnt+13]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+13]]))
            self.label_15.setText(str(memAddresses[cnt+14]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+14]]))
            self.label_16.setText(str(memAddresses[cnt+15]) + " : " + self.convert(ProcessingUnit.dataMemory[memAddresses[cnt+15]]))
        except:
            self.maxCount = cnt

    def cacheDataUpdate(self, misses, hits):
        victimStr = ""
        if dataCacheMemory.victim != -1:
            victimStr = "Victim Block: "+str(dataCacheMemory.victim)
        setStr = ""
        if dataCacheMemory.current != -1:
            setStr = "Current Set: "+str(dataCacheMemory.current)
        self.jaglike.setText("Number of misses = "+ str(misses[0]) + '\n' + "Number of hits = "+str(hits[0]) + '\n' + "Total Number of accesses = "+str(misses[0]+hits[0]) + '\n' + victimStr + '\n' + setStr+'\n')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1680, 865)
        MainWindow.setStyleSheet("background:rgb(44, 44, 44)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(570, 40, 2, 1061))
        self.line_2.setStyleSheet("background:white")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(890, 623, 247, 36))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(890, 229, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(890, 185, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(890, 360, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(890, 448, 247, 36))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(890, 491, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(890, 316, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setGeometry(QtCore.QRect(890, 54, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_1.setFont(font)
        self.label_1.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_1.setAlignment(QtCore.Qt.AlignCenter)
        self.label_1.setObjectName("label_1")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(890, 580, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(890, 98, 247, 36))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(890, 404, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(890, 535, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(890, 141, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(890, 666, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_15.setAlignment(QtCore.Qt.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(890, 273, 247, 36))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(890, 710, 247, 37))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_16.setAlignment(QtCore.Qt.AlignCenter)
        self.label_16.setObjectName("label_16")
        #-----------------------------------------------------#
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(910, 760, 93, 41))
        self.pushButton.setStyleSheet("color:white\n")
        self.pushButton.clicked.connect(self.memUpPressed)
        self.pushButton.setObjectName("pushButton")
        #-----------------------------------------------------#
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(1010, 760, 93, 41))
        self.pushButton_2.setStyleSheet("color:white")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.memDownPressed)
        #-----------------------------------------------------#
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(910, 9, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        #-----------------------------------------------------#
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(960, 40, 118, 3))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        #-----------------------------------------------------#
        self.reg14 = QtWidgets.QLabel(self.centralwidget)
        self.reg14.setGeometry(QtCore.QRect(600, 623, 247, 36))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg14.setFont(font)
        self.reg14.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg14.setAlignment(QtCore.Qt.AlignCenter)
        self.reg14.setObjectName("reg14")
        #-----------------------------------------------------#
        self.reg12 = QtWidgets.QLabel(self.centralwidget)
        self.reg12.setGeometry(QtCore.QRect(600, 535, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg12.setFont(font)
        self.reg12.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg12.setAlignment(QtCore.Qt.AlignCenter)
        self.reg12.setObjectName("reg12")
        #-----------------------------------------------------#
        self.reg7 = QtWidgets.QLabel(self.centralwidget)
        self.reg7.setGeometry(QtCore.QRect(600, 316, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg7.setFont(font)
        self.reg7.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg7.setAlignment(QtCore.Qt.AlignCenter)
        self.reg7.setObjectName("reg7")
        #-----------------------------------------------------#
        self.reg16 = QtWidgets.QLabel(self.centralwidget)
        self.reg16.setGeometry(QtCore.QRect(600, 710, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg16.setFont(font)
        self.reg16.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg16.setAlignment(QtCore.Qt.AlignCenter)
        self.reg16.setObjectName("reg16")
        #-----------------------------------------------------#
        self.reg3 = QtWidgets.QLabel(self.centralwidget)
        self.reg3.setGeometry(QtCore.QRect(600, 141, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg3.setFont(font)
        self.reg3.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg3.setAlignment(QtCore.Qt.AlignCenter)
        self.reg3.setObjectName("reg3")
        #-----------------------------------------------------#
        self.reg9 = QtWidgets.QLabel(self.centralwidget)
        self.reg9.setGeometry(QtCore.QRect(600, 404, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg9.setFont(font)
        self.reg9.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg9.setAlignment(QtCore.Qt.AlignCenter)
        self.reg9.setObjectName("reg9")
        #-----------------------------------------------------#
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(620, 9, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        #-----------------------------------------------------#
        self.reg1 = QtWidgets.QLabel(self.centralwidget)
        self.reg1.setGeometry(QtCore.QRect(600, 54, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg1.setFont(font)
        self.reg1.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg1.setAlignment(QtCore.Qt.AlignCenter)
        self.reg1.setObjectName("reg1")
        #-----------------------------------------------------#
        self.reg6 = QtWidgets.QLabel(self.centralwidget)
        self.reg6.setGeometry(QtCore.QRect(600, 273, 247, 36))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg6.setFont(font)
        self.reg6.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg6.setAlignment(QtCore.Qt.AlignCenter)
        self.reg6.setObjectName("reg6")
        #-----------------------------------------------------#
        self.reg15 = QtWidgets.QLabel(self.centralwidget)
        self.reg15.setGeometry(QtCore.QRect(600, 666, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg15.setFont(font)
        self.reg15.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg15.setAlignment(QtCore.Qt.AlignCenter)
        self.reg15.setObjectName("reg15")
        #-----------------------------------------------------#
        self.reg10 = QtWidgets.QLabel(self.centralwidget)
        self.reg10.setGeometry(QtCore.QRect(600, 448, 247, 36))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg10.setFont(font)
        self.reg10.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg10.setAlignment(QtCore.Qt.AlignCenter)
        self.reg10.setObjectName("reg10")
        #-----------------------------------------------------#
        self.reg5 = QtWidgets.QLabel(self.centralwidget)
        self.reg5.setGeometry(QtCore.QRect(600, 229, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg5.setFont(font)
        self.reg5.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg5.setAlignment(QtCore.Qt.AlignCenter)
        self.reg5.setObjectName("reg5")
        #-----------------------------------------------------#
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(670, 40, 118, 3))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        #-----------------------------------------------------#
        self.reg13 = QtWidgets.QLabel(self.centralwidget)
        self.reg13.setGeometry(QtCore.QRect(600, 580, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg13.setFont(font)
        self.reg13.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg13.setAlignment(QtCore.Qt.AlignCenter)
        self.reg13.setObjectName("reg13")
        #-----------------------------------------------------#
        self.reg11 = QtWidgets.QLabel(self.centralwidget)
        self.reg11.setGeometry(QtCore.QRect(600, 491, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg11.setFont(font)
        self.reg11.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.reg11.setAlignment(QtCore.Qt.AlignCenter)
        self.reg11.setObjectName("reg11")
        #-----------------------------------------------------#
        self.reg8 = QtWidgets.QLabel(self.centralwidget)
        self.reg8.setGeometry(QtCore.QRect(600, 360, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg8.setFont(font)
        self.reg8.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg8.setAlignment(QtCore.Qt.AlignCenter)
        self.reg8.setObjectName("reg8")
        #-----------------------------------------------------#
        self.reg4 = QtWidgets.QLabel(self.centralwidget)
        self.reg4.setGeometry(QtCore.QRect(600, 185, 247, 37))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg4.setFont(font)
        self.reg4.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg4.setAlignment(QtCore.Qt.AlignCenter)
        self.reg4.setObjectName("reg4")
        #-----------------------------------------------------#
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(620, 760, 93, 41))
        self.pushButton_3.setStyleSheet("color:white")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.regUpPressed)
        #-----------------------------------------------------#
        self.reg2 = QtWidgets.QLabel(self.centralwidget)
        self.reg2.setGeometry(QtCore.QRect(600, 98, 247, 36))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reg2.setFont(font)
        self.reg2.setStyleSheet("background:rgb(0, 255, 127)rgb(130, 130, 130);color:white\n""")
        self.reg2.setAlignment(QtCore.Qt.AlignCenter)
        self.reg2.setObjectName("reg2")
        #-----------------------------------------------------#
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(720, 760, 93, 41))
        self.pushButton_4.setStyleSheet("color:white\n""")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.regDownPressed)
        #-----------------------------------------------------#
        self.pipeline1 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline1.setGeometry(QtCore.QRect(240, 591, 250, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline1.setFont(font)
        self.pipeline1.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline1.setObjectName("pipeline1")
        #-----------------------------------------------------#
        self.pipeline2 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline2.setGeometry(QtCore.QRect(240, 641, 250, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline2.setFont(font)
        self.pipeline2.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline2.setObjectName("pipeline2")
        #-----------------------------------------------------#
        self.pipeline2_2 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline2_2.setGeometry(QtCore.QRect(240, 741, 250, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline2_2.setFont(font)
        self.pipeline2_2.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline2_2.setObjectName("pipeline2_2")
        #-----------------------------------------------------#
        self.pipeline1_2 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline1_2.setGeometry(QtCore.QRect(240, 691, 250, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline1_2.setFont(font)
        self.pipeline1_2.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline1_2.setObjectName("pipeline1_2")
        #-----------------------------------------------------#
        self.pipeline2_3 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline2_3.setGeometry(QtCore.QRect(240, 791, 250, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline2_3.setFont(font)
        self.pipeline2_3.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline2_3.setObjectName("pipeline2_3")
        #-----------------------------------------------------#
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 10, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("color:white")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(lambda: mainFunc(0))
        #-----------------------------------------------------#
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(380, 10, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("color:white")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(resetAll)
        #-----------------------------------------------------#
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(200, 10, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet("color:white")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(lambda: mainFunc(1))
        #-----------------------------------------------------#
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(20, 70, 110, 35))
        self.pushButton_5.setStyleSheet("color:white")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(isPipelined)
        #-----------------------------------------------------#
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(410, 70, 110, 35))
        self.pushButton_6.setStyleSheet("color:white")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(printValuesInPipeRegAfterEachCycle)
        #-----------------------------------------------------#
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(280, 70, 110, 35))
        self.pushButton_10.clicked.connect(printValuesInRegAfterEachCycle)
        #-----------------------------------------------------#
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 44, 44))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        #-----------------------------------------------------#
        self.pushButton_10.setPalette(palette)
        self.pushButton_10.setStyleSheet("color:white")
        self.pushButton_10.setObjectName("pushButton_10")
        #-----------------------------------------------------#
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(210, 120, 110, 35))
        self.pushButton_11.setStyleSheet("color:white")
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_11.clicked.connect(printForSpecific)
        #-----------------------------------------------------#
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(150, 70, 110, 35))
        self.pushButton_12.setStyleSheet("color:white")
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_12.clicked.connect(isDataForward)
        #-----------------------------------------------------#
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(310, 170, 251, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("background:rgb(0, 255, 255)")
        self.label_19.setObjectName("label_19")
        #-----------------------------------------------------#
        self.pipeline2_4 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline2_4.setGeometry(QtCore.QRect(80, 641, 130, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline2_4.setFont(font)
        self.pipeline2_4.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline2_4.setObjectName("pipeline2_4")
        #-----------------------------------------------------#
        self.pipeline2_5 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline2_5.setGeometry(QtCore.QRect(80, 741, 130, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline2_5.setFont(font)
        self.pipeline2_5.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline2_5.setObjectName("pipeline2_5")
        #-----------------------------------------------------#
        self.pipeline1_3 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline1_3.setGeometry(QtCore.QRect(80, 691, 130, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline1_3.setFont(font)
        self.pipeline1_3.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline1_3.setObjectName("pipeline1_3")
        #-----------------------------------------------------#
        self.pipeline1_4 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline1_4.setGeometry(QtCore.QRect(80, 591, 130, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline1_4.setFont(font)
        self.pipeline1_4.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline1_4.setObjectName("pipeline1_4")
        #-----------------------------------------------------#
        self.pipeline2_6 = QtWidgets.QLabel(self.centralwidget)
        self.pipeline2_6.setGeometry(QtCore.QRect(80, 791, 130, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pipeline2_6.setFont(font)
        self.pipeline2_6.setStyleSheet("background:rgb(0, 255, 255)")
        self.pipeline2_6.setObjectName("pipeline2_6")
        #-----------------------------------------------------#
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(20, 170, 261, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("background:rgb(0, 255, 255)")
        self.label_20.setObjectName("label_20")
        #-----------------------------------------------------#
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(40, 580, 481, 2))
        self.line_5.setStyleSheet("background:rgb(252, 252, 252)")
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        #-----------------------------------------------------#
        self.label_26 = QtWidgets.QLabel(self.centralwidget)
        self.label_26.setGeometry(QtCore.QRect(30, 470, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("color:black;background:rgb(85, 255, 255)")
        self.label_26.setAlignment(QtCore.Qt.AlignCenter)
        self.label_26.setObjectName("label_26")
        #-----------------------------------------------------#
        self.label_27 = QtWidgets.QLabel(self.centralwidget)
        self.label_27.setGeometry(QtCore.QRect(30, 310, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("color:black;background:rgb(85, 255, 255)")
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        #-----------------------------------------------------#
        self.label_28 = QtWidgets.QLabel(self.centralwidget)
        self.label_28.setGeometry(QtCore.QRect(30, 390, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("color:black;background:rgb(85, 255, 255)")
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        #-----------------------------------------------------#
        self.line_7 = QtWidgets.QFrame(self.centralwidget)
        self.line_7.setGeometry(QtCore.QRect(40, 250, 481, 2))
        self.line_7.setStyleSheet("background:rgb(252, 252, 252)")
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        #-----------------------------------------------------#
        self.label_29 = QtWidgets.QLabel(self.centralwidget)
        self.label_29.setGeometry(QtCore.QRect(150, 310, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("color:black;background:rgb(85, 255, 255)")
        self.label_29.setAlignment(QtCore.Qt.AlignCenter)
        self.label_29.setObjectName("label_29")
        #-----------------------------------------------------#
        self.label_30 = QtWidgets.QLabel(self.centralwidget)
        self.label_30.setGeometry(QtCore.QRect(150, 470, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet("color:black;background:rgb(85, 255, 255)")
        self.label_30.setAlignment(QtCore.Qt.AlignCenter)
        self.label_30.setObjectName("label_30")
        #-----------------------------------------------------#
        self.label_31 = QtWidgets.QLabel(self.centralwidget)
        self.label_31.setGeometry(QtCore.QRect(150, 390, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("color:black;background:rgb(85, 255, 255)")
        self.label_31.setAlignment(QtCore.Qt.AlignCenter)
        self.label_31.setObjectName("label_31")
        #-----------------------------------------------------#
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(870, 40, 2, 1061))
        self.line_6.setStyleSheet("background:white")
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")

        self.line_8 = QtWidgets.QFrame(self.centralwidget)
        self.line_8.setObjectName(u"line_8")
        self.line_8.setGeometry(QtCore.QRect(1160, 41, 2, 1061))
        self.line_8.setStyleSheet(u"background:white")
        self.line_8.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.cacheLabel = QtWidgets.QLabel(self.centralwidget)
        self.cacheLabel.setObjectName(u"cacheLabel")
        self.cacheLabel.setGeometry(QtCore.QRect(1190, 50, 501, 691))
        self.cacheLabel.setFont(font)
        self.cacheLabel.setStyleSheet(u"background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.cacheLabel.setAlignment(QtCore.Qt.AlignCenter)

        self.downCache = QtWidgets.QPushButton(self.centralwidget)
        self.downCache.setObjectName(u"downCache")
        self.downCache.setGeometry(QtCore.QRect(1490, 760, 93, 41))
        self.downCache.setStyleSheet(u"color:white")
        self.downCache.clicked.connect(self.cacheDownPressed)
        self.upCache = QtWidgets.QPushButton(self.centralwidget)
        self.upCache.setObjectName(u"upCache")
        self.upCache.setGeometry(QtCore.QRect(1330, 760, 93, 41))
        self.upCache.setStyleSheet(u"color:white\n""")
        self.upCache.clicked.connect(self.cacheUpPressed)
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setObjectName(u"label_17")
        self.label_17.setGeometry(QtCore.QRect(1310, 0, 211, 31))
        self.label_17.setFont(font)
        self.label_17.setStyleSheet(u"background:rgb(0, 255, 127)rgb(130, 130, 130);color:white")
        self.label_17.setAlignment(QtCore.Qt.AlignCenter)
        self.jaglike = QtWidgets.QLabel(self.centralwidget)
        self.jaglike.setObjectName(u"jaglike")
        self.jaglike.setGeometry(QtCore.QRect(270, 320, 251, 191))
        self.jaglike.setFont(font)
        self.jaglike.setStyleSheet(u"background:rgb(0, 255, 255)")
        self.changeCache = QtWidgets.QPushButton(self.centralwidget)
        self.changeCache.setObjectName(u"ChangeCache")
        self.changeCache.setGeometry(QtCore.QRect(1200, 760, 110, 41))
        self.changeCache.setStyleSheet(u"color:white\n""")
        self.changeCache.clicked.connect(self.changeCachePressed)

        #-----------------------------------------------------#
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1173, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        #-----------------------------------------------------#
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        #-----------------------------------------------------#
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_14.setText(_translate("MainWindow", ""))
        self.label_5.setText(_translate("MainWindow", ""))
        self.label_4.setText(_translate("MainWindow", ""))
        self.label_8.setText(_translate("MainWindow", ""))
        self.label_10.setText(_translate("MainWindow", ""))
        self.label_11.setText(_translate("MainWindow", ""))
        self.label_7.setText(_translate("MainWindow", ""))
        self.label_1.setText(_translate("MainWindow", ""))
        self.label_13.setText(_translate("MainWindow", ""))
        self.label_2.setText(_translate("MainWindow", ""))
        self.label_9.setText(_translate("MainWindow", ""))
        self.label_12.setText(_translate("MainWindow", ""))
        self.label_3.setText(_translate("MainWindow", ""))
        self.label_15.setText(_translate("MainWindow", ""))
        self.label_6.setText(_translate("MainWindow", ""))
        self.label_16.setText(_translate("MainWindow", ""))
        self.pushButton.setText(_translate("MainWindow", "UP"))
        self.pushButton_2.setText(_translate("MainWindow", "DOWN"))
        self.label.setText(_translate("MainWindow", "Memory"))
        self.reg14.setText(_translate("MainWindow", ""))
        self.reg12.setText(_translate("MainWindow", ""))
        self.reg7.setText(_translate("MainWindow", ""))
        self.reg16.setText(_translate("MainWindow", ""))
        self.reg3.setText(_translate("MainWindow", ""))
        self.reg9.setText(_translate("MainWindow", ""))
        self.label_23.setText(_translate("MainWindow", "Registers"))
        self.reg1.setText(_translate("MainWindow", ""))
        self.reg6.setText(_translate("MainWindow", ""))
        self.reg15.setText(_translate("MainWindow", ""))
        self.reg10.setText(_translate("MainWindow", ""))
        self.reg5.setText(_translate("MainWindow", ""))
        self.line_4.setStyleSheet(_translate("MainWindow", "background:rgb(0, 255, 127)rgb(130, 130, 130)"))
        self.reg13.setText(_translate("MainWindow", ""))
        self.reg11.setText(_translate("MainWindow", ""))
        self.reg8.setText(_translate("MainWindow", ""))
        self.reg4.setText(_translate("MainWindow", ""))
        self.pushButton_3.setText(_translate("MainWindow", "UP"))
        self.reg2.setText(_translate("MainWindow", ""))
        self.pushButton_4.setText(_translate("MainWindow", "DOWN"))
        self.pipeline1.setText(_translate("MainWindow", ""))
        self.pipeline2.setText(_translate("MainWindow", ""))
        self.pipeline2_2.setText(_translate("MainWindow", ""))
        self.pipeline1_2.setText(_translate("MainWindow", ""))
        self.pipeline2_3.setText(_translate("MainWindow", ""))
        self.pushButton_7.setText(_translate("MainWindow", "RUN"))
        self.pushButton_9.setText(_translate("MainWindow", "RESET"))
        self.pushButton_8.setText(_translate("MainWindow", "STEP"))
        self.pushButton_5.setText(_translate("MainWindow", "PipeLine"))
        self.pushButton_6.setText(_translate("MainWindow", "PrintBuffValue"))
        self.pushButton_10.setText(_translate("MainWindow", "PrintRegValue"))
        self.pushButton_11.setText(_translate("MainWindow", "PrintSpecific"))
        self.pushButton_12.setText(_translate("MainWindow", "Forwarding"))
        self.label_19.setText(_translate("MainWindow", "CLOCK:  0"))
        self.pipeline2_4.setText(_translate("MainWindow", "Decode"))
        self.pipeline2_5.setText(_translate("MainWindow", "Memory Acc"))
        self.pipeline1_3.setText(_translate("MainWindow", "Execute"))
        self.pipeline1_4.setText(_translate("MainWindow", "Fetch"))
        self.pipeline2_6.setText(_translate("MainWindow", "Reg Update"))
        self.label_20.setText(_translate("MainWindow", "DataHzd: 0, CtrlHzd: 0"))
        self.label_26.setText(_translate("MainWindow", "M"))
        self.label_27.setText(_translate("MainWindow", "D"))
        self.label_28.setText(_translate("MainWindow", "E"))
        self.label_29.setText(_translate("MainWindow", "D"))
        self.label_30.setText(_translate("MainWindow", "M"))
        self.label_31.setText(_translate("MainWindow", "E"))
        self.label_17.setText(QtCore.QCoreApplication.translate("MainWindow", u"DATA CACHE", None))
        self.upCache.setText(_translate("MainWindow", "UP"))
        self.downCache.setText(_translate("MainWindow", "DOWN"))
        self.jaglike.setText("")
        self.changeCache.setText("ChangeCache")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()     # MainWindow is an object of the class QMainWindow
    ui = Ui_MainWindow()                     # ui is object of the class Ui_MainWindow()
    ui.setupUi(MainWindow)   # calling the setupUi function inside the Ui_MainWindow class using the object of this class and as an argument we pass the MainWindow object that we have created above
    MainWindow.show()
    sys.exit(app.exec_())
